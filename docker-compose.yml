version: '3.8'

services:
  db:
    image: postgres:14
    container_name: db_postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: mydb
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  backend:
    build: ./backend
    container_name: app_backend
    depends_on:
      - db
    environment:
      DATABASE_URL: postgres://myuser:mypass@db:5432/mydb
      PORT: 4000
    expose:
      - "4000"   # 只在內網開放

  frontend:
    build: ./frontend
    container_name: app_frontend
    depends_on:
      - backend
    expose:
      - "80"     # 只在內網開放

  proxy:
    image: nginx:alpine
    container_name: web_proxy
    ports:
      - "80:80"   # 對外只暴露 80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
# 1) Node Exporter：采集主机指标
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"  # 对外暴露端口
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.cpu'
      - '--collector.meminfo'
      - '--collector.diskstats'

  # 2) Prometheus：抓取指标
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  # 3) Grafana：可视化
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=yourpassword
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  grafana-storage: